name: EKS prod Deployment for BE

on:
  push:
    branches:
      - main
    paths:
      - 'blog-app/backend/**'

concurrency:
  group: prod

jobs:
 approval_required:
   runs-on: ubuntu-latest
   timeout-minutes: 2
   steps:
     - uses: trstringer/manual-approval@v1
       with:
         secret: ${{ secrets.PAT }}
         minimum-approvals: 1
         issue-title: "Deploying to prod"
         approvers: ${{ secrets.APPROVERS_LIST }}
 build:
  needs: approval_required
  runs-on: ubuntu-latest

  steps:
  # Checkout the code from GitHub
  - name: Checkout code
    uses: actions/checkout@v4.2.2
    with:
     fetch-depth: 0

# Set up Docker Buildx for multi-platform builds
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3.7.1

# Log in to AWS using the AWS credentials stored in GitHub secrets
  - name: Log in to AWS
    uses: aws-actions/configure-aws-credentials@v4
    with:
     aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
     aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
     aws-region: ${{ secrets.PROD_AWS_REGION }}

# Log in to AWS ECR
  - name: Login to Amazon ECR Private
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v2

# Build and push Docker image to ECR
  - name: Build and push Docker image to ECR
    env:
      AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
    run: |
     cd blog-app/backend/
     touch .env
     aws_account_id=$(aws sts get-caller-identity --query Account --output text)
     region=$AWS_REGION
     repository_name=backend
     image_tag=${GITHUB_SHA}
     docker build -t $aws_account_id.dkr.ecr.$region.amazonaws.com/$repository_name:$image_tag .
     docker push $aws_account_id.dkr.ecr.$region.amazonaws.com/$repository_name:$image_tag
     rm .env

 deploy:
  needs: build
  runs-on: ubuntu-latest
  environment: prod

 
  steps:
  # Checkout the code again
  - name: Checkout code
    uses: actions/checkout@v2
 
  # Log in to AWS using the AWS credentials stored in GitHub secrets
  - name: Log in to AWS
    uses: aws-actions/configure-aws-credentials@v1
    with:
     aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
     aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
     aws-region: ${{ secrets.PROD_AWS_REGION }}
 
  # Pushing Backend image tag to AWS Secrets Manager
  - name: Save Image Tag to Secrets Manager
    run: |
     repo_name=backend
     aws secretsmanager create-secret --name $repo_name-image --secret-string ${{ github.sha }} || aws secretsmanager update-secret --secret-id $repo_name-image --secret-string ${{ github.sha }}
  
  # Set up AWS CLI and EKS credentials
  - name: Set up AWS CLI and EKS Credentials
    run: |
     aws eks update-kubeconfig --name ${{ secrets.PROD_CLUSTER_NAME }} --region ${{ secrets.PROD_AWS_REGION }}
 
  # Set up kubectl
  - name: Setup kubectl
    uses: azure/setup-kubectl@v3
  - name: Set EKS context
    run: |
     kubectl config use-context arn:aws:eks:${{ secrets.PROD_AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):cluster/${{ secrets.PROD_CLUSTER_NAME }}

  # Retrieve the image tag from AWS Secrets Manager
  - name: Retrieve Image Tag from Secrets Manager
    id: get_image_tag
    run: |
      image_tag=$(aws secretsmanager get-secret-value --secret-id backend-image --query 'SecretString' --output text)
      echo "image_tag=$image_tag" >> $GITHUB_ENV

  # Update the Kubernetes deployment with the latest image from ECR
  - name: Deploy to EKS
    env:
      AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
    run: |
     aws_account_id=$(aws sts get-caller-identity --query Account --output text)
     region=$AWS_REGION
     repository_name=backend
     image_tag=${GITHUB_SHA}
     namespace=blog-app
     kubectl set image deployment/backend backend=$aws_account_id.dkr.ecr.$region.amazonaws.com/$repository_name:$image_tag -n $namespace
     kubectl rollout status deployment/backend -n $namespace
